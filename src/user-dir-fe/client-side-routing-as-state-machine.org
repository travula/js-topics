# ;; -*- mode: org; fill-column: 32; -*-
#+TITLE: Client side Routing as a State Machine
#+DATE: [2017-02-19 Sun]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Objective
  How to design and develop the
  front end (client side
  routing) of an application as
  a state machine.

* Routes (DFA locations)
  The front end application is
  conceived as a set of states
  in a DFA.  Each route is a
  state and the transition of
  the states in the DFA is
  determined by the different
  triggers.

#+BEGIN_EXAMPLE
 1.  #get_all_users
 2.  #edit_user
 3.  #add_user
 4.  #delete_user
#+END_EXAMPLE

** Transition Graph

Include Picture here.

* Templates
** get_all_users
#+BEGIN_EXAMPLE
1. edit  (button for each row)
2. delete (button for each row)
3. add user (button)
4. Name and email of the user
#+END_EXAMPLE
*** A notation for specifying elements
#+BEGIN_EXAMPLE
(<app-header>
 <add-user-button>
 (<user-name> <user-email> <edit-button> <del-button>) 
 ...)
#+END_EXAMPLE
*** HTML for get_all_users
    The rows are hard coded with the values, to show the routing
#+NAME: get_all_users_html
#+BEGIN_SRC html 
<div id="add-user-btn" class="hidden">
  <p> List of Users </p>
  <ul id="add-user">
    <li>
      <button id="add">Add</button>
    </li>
  </ul>
</div>
      
<div id="get-all-users-container" class="hidden">
  <ul id="users-list">
    <li>
      Name: Jub Jub Bird | Email: jub-jub@nonsense.verse
      <button id="edit">Edit</button>
      <button id="delete">Delete</button>
    </li>

    <li>
      Name: Grim Reaper | Email: reaper@whitehouse.gov
      <button id="edit">Edit</button>
      <button id="delete">Delete</button>
    </li>

  </ul>
</div>

#+END_SRC
** delete_user
#+BEGIN_EXAMPLE
1. name  (read only)
2. email (read only)
3. delete  (button)
4. cancel (button)
#+END_EXAMPLE

*** Notation

#+BEGIN_EXAMPLE
(<app-header>
 <name-label> <name-readonly>
 <email-label> <email-readonly>
 <delete-button> <cancel-button>)
#+END_EXAMPLE
*** HTML for delete user

#+NAME: delete_user_html
#+BEGIN_SRC html 
<div id="delete-user-container" class="hidden">
  <p> Delete User </p>
  <ul id="delete-user">
    <li>
      Name: Grim Reaper | Email: reaper@whitehouse.gov
    </li>

    <li>
      <button id="delete">Delete</button>
      <button id="cancel">Cancel</button>
    </li>

  </ul>
</div>

#+END_SRC
** edit_user
Controls (transition edges)
#+BEGIN_EXAMPLE
1. name  (text input)
2. email (text input)
3. done  (button)
4. cancel (button)
#+END_EXAMPLE

*** Notation
#+BEGIN_EXAMPLE
<edit-template> :: = 
(<app-header>
 <name-label> <name-input>
 <email-label> <email-input>
 <done-button> <cancel-button>)

#+END_EXAMPLE

*** HTML for edit user

#+NAME: edit_user_html
#+BEGIN_SRC html 
<div id="edit-user-container" class="hidden">
  <p> Edit User </p>
  <ul id="edit-user">
    <li>
      <label> Name:</label>
      <input id="name-box" type="text" value="Grim Reaper"></input>
    </li>

    <li>
      <label> Email:</label>
      <input id="email-box" type="text" value="reaper@whitehouse.gov"></input>
    </li>

    <li>
      <button id="done">Done</button>
      <button id="cancel">Cancel</button>
    </li>
    
  </ul>
</div>

#+END_SRC
** add_user
Controls (transition edges)
#+BEGIN_EXAMPLE
1. name  (text input)
2. email (text input)
3. add  (button)
4. cancel (button)
#+END_EXAMPLE
*** Notation
#+BEGIN_EXAMPLE
<edit-template>
#+END_EXAMPLE

*** HTML for Add User

#+NAME: add_user_html
#+BEGIN_SRC html 
<div id="add-user-container" class="hidden">
  <p> Add User </p>
  <ul id="add-user">
    <li>
      <label> Name:</label>
      <input id="name-box" type="text"></input>
    </li>

    <li>
      <label> Email:</label>
      <input id="email-box" type="text"></input>
    </li>

    <li>
      <button id="add">Add</button>
      <button id="cancel">Cancel</button>
    </li>
    
  </ul>
</div>

#+END_SRC
** All together
#+BEGIN_SRC html :tangle index.html :eval no :noweb yes
<html>
  <head>
  <link rel="stylesheet" type="text/css" href="common.css" />
  <script type="text/javascript" src="jquery-3.1.1.min.js"></script>
  <script type="text/javascript" src="main.js"></script>
  </head>
  <body>
    <<get_all_users_html>>
    <<add_user_html>>
    <<delete_user_html>>
    <<edit_user_html>>
  </body>
</html>

#+END_SRC

** Style
#+NAME: common_styles
#+BEGIN_SRC css :tangle common.css

#add-user-btn {
    margin-top: 2em;
    margin-left: 32em;
}

#get-all-users-container {
    margin-left: 4em;
    margin-top: 2.5em;
}

#add-user-container {
    margin-left: 4em;
    margin-top: 2.5em;
}

#delete-user-container {
    margin-left: 4em;
    margin-top: 2.5em;
}

#edit-user-container {
    margin-left: 4em;
    margin-top: 2.5em;
}

li {
    list-style-type: none;
    margin-bottom: 3em;
}

ul {
    list-style-type: none;
}

button { 
    width: 4em;
    margin: 1.5em;
}

.hidden {
    display: none;
}

p {
    font-size:300%;
    /* margin-left: 0em; */
    /* margin-top: 2.5em; */

}
#+END_SRC

* Behaviour
** Hash Route registration handlers and helpers
#+NAME: hash_routes_registration_handlers_helpers
#+BEGIN_SRC  js

function hide_all_containers() {
  // TODO: consider refactoring to addClass in a loop
  console.log("hide containers");
  $('#get-all-users-container').addClass("hidden");
  $('#add-user-container').addClass("hidden");
  $('#edit-user-container').addClass("hidden");
  $('#delete-user-container').addClass("hidden");
  $('#add-user-btn').addClass("hidden");
};

var setAddHash = function() {
  window.location.hash='add_user';
};

var setEditHash = function() {
  window.location.hash='edit_user';
};

var setDelHash = function() {
  window.location.hash='delete_user';
};

var setIndexHash = function() {
  window.location.hash='index';
};

function navigate(path) {
  var current = window.location.href;
  window.location.href = current.replace(/#(.*)$/, '') + '#' + path;
};

//strip # from window.location.hash
function get_window_hash_path() {
  return location.hash.substring(1);
};

function register_onhashchange_handlers(handler_functions) {
  $(window).on("hashchange", function(e) {
    //strip hash out
    hash_path = get_window_hash_path();
    console.log("new hash: ", hash_path);
    //we use hasOwnProperty since we need to check if a handler is 
    // defined for the hash_path
    //object has it, not its parents (in the prototype chain)
    if (handler_functions.hasOwnProperty(hash_path)) {
      //invoke said handler function
      handler_functions[hash_path]();
    } else {
      console.warn(`no handler for ${hash_path}`);
    }
  });
};

#+END_SRC

** Set On Load Handlers
#+NAME: on_load_handlers
#+BEGIN_SRC js

window.onload = function() {
  register_onhashchange_handlers({
    index: get_all_users_handler,
    get_all_users: get_all_users_handler,
    add_user: add_user_handler,
    edit_user: edit_user_handler,
    delete_user: delete_user_handler});

  let current_hash = get_window_hash_path();
  if (current_hash === "") {
    console.log("defaulting #url to get_all_users");
    current_hash = "index";
    console.log("navigating to: #" + current_hash);
    navigate(current_hash);
  }
  
  $(window).trigger("hashchange");
  
};

#+END_SRC

** Get Users

#+BEGIN_EXAMPLE
1. When the page loads,
   i.e. index, users are shown
2. The =Add= button =click=
   event should be set to allow
   adding a user
3. The =Edit= and =Delete=
   buttons on each row should be
   set to navigate to edit page
   and delete page respectively.
#+END_EXAMPLE

*** Set handlers for the buttons
    The handlers for the buttons - add, edit and delete - have to be set so
    that navigation happens to the respective page. 

#+NAME: get_all_users_handler
#+BEGIN_SRC js
function get_all_users_handler() {
  console.log("get_all_users_handler");
  hide_all_containers();
  $('#get-all-users-container').removeClass("hidden");
  $('#add-user-btn').removeClass("hidden");

  $('#add-user-btn #add')[0].addEventListener("click", setAddHash);
                   
  let editBtns = $('#get-all-users-container #edit');
  let delBtns =  $('#get-all-users-container #delete');


  for (editBtn of editBtns) {
    editBtn.removeEventListener('click', setEditHash);
    editBtn.addEventListener('click', setEditHash);
  };

  for (delBtn of delBtns) {
    delBtn.removeEventListener('click', setDelHash);
    delBtn.addEventListener('click', setDelHash);
  };

};

#+END_SRC

** Add User
#+BEGIN_EXAMPLE
1. Show =Add user page= and hide
   all others.
2. Set listeners for the buttons
   =Add= and =Cancel= for the
   event =click= such that we
   traverse to the index page.
#+END_EXAMPLE

#+NAME: add_user_handler
#+BEGIN_SRC js
function add_user_handler() {
  console.log("add user handler")
  hide_all_containers();
  $('#add-user-container').removeClass("hidden");
  $('#add-user-container #add')[0].addEventListener("click", setIndexHash);
  $('#add-user-container #cancel')[0].addEventListener("click", setIndexHash);
}

#+END_SRC
** Edit User
#+BEGIN_EXAMPLE
1. Show =Edit User page= and
   hide all others.
2. Set listeners for the buttons
   =Done= and =Cancel= for the
   event =click= such that we
   traverse to the index page.
#+END_EXAMPLE
#+NAME: edit_user_handler
#+BEGIN_SRC js
function edit_user_handler() {
  console.log("edit user handler")
  hide_all_containers();
  $('#edit-user-container').removeClass("hidden");
  $('#edit-user-container #done')[0].addEventListener("click", setIndexHash);
  $('#edit-user-container #cancel')[0].addEventListener("click", setIndexHash);
}

#+END_SRC
** Delete User
#+BEGIN_EXAMPLE
1. Show =Delete User page= and
   hide all others.
2. Set listeners for the buttons
   =Delete= and =Cancel= for the
   event =click= such that we
   traverse to the index page.
#+END_EXAMPLE
#+NAME: delete_user_handler
#+BEGIN_SRC js
function delete_user_handler() {
  console.log("delete user handler")
  hide_all_containers();
  $('#delete-user-container').removeClass("hidden");
  $('#delete-user-container #delete')[0].addEventListener("click", setIndexHash);
  $('#delete-user-container #cancel')[0].addEventListener("click", setIndexHash);
}

#+END_SRC
** Javascript Tangle                          :boilerplate:
#+BEGIN_SRC js :tangle main.js :eval no :noweb yes
<<hash_routes_registration_handlers_helpers>>
<<on_load_handlers>>
<<get_all_users_handler>>
<<add_user_handler>>
<<edit_user_handler>>
<<delete_user_handler>>
#+END_SRC
