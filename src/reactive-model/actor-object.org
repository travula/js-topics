#+title:  An implementation of Actors in Javascript
#+setupfile:  ../org-templates/level-1.org
* Introduction

This note builds an implementation of actors based on the
blog [[http://www.dalnefre.com/wp/2014/03/actors-in-javascript/][It's Actors all the way down]], but with one important
difference (see below).

* Actors and objects 

** An Actor is an object that reacts to messages

An actor is an object.  Each actor carries with it a name,
other local state, and a method =react=, which is a function
of one argument, a message.  A handler takes a message and
does something: typically, it modifies its local state
variables or sends a message to other actors.

** An actor sends messages to another actor

An actor =A= can /send/ a message =m= to an actor =B=.  A
send is different from a function call.  Unlike a function
call, a send never returns.  Hence there is no need for =A=
to wait for =B= to 'finish' processing the message it sent
to =B=.  A /send/ is thus /asynchronous/.  Contrast this
with a function call, where =A= waits until =B= completes
the processing of the message =m=.  A function or method
call, is thus /synchronous/.

** SMS vs. Phone calls

The best way to understand the difference between a send and
a call is to consider the analogy between an SMS (or a
WhatsApp) message versus a phone call.  SMS is asynchronous
(you simply send the message and move on to other things). 
A phone call is synchronous (you're waiting for the other
party to pick up the call).

* Why Actors?

The function (also called subroutine) call has been the
mainstay of computer programming languages.  The function
call abstraction was ideally suited to stand alone programs
running on single machines.  However, it soon became evident
that programs running /concurrently/ could be more efficient
than those running sequentially.  These programs relied on
the model where different parts of the programs (threads)
would run concurrently and share reading and writing of
memory.  Without concurrent execution, little could be
assumed about the /order/ in which operations happen.
Without careful coordination, such concurrent programs could
leave the computation in an inconsistent state.  Consider
for example, two threads of execution, each trying to
increment a shared variable =x=.  After the execution of
both the threads, one expects =x= to be updated to =x+2=.
With concurrent programs, it is not possible to guarantee
this, unless the concurrency is controlled by stipulating
sequential and exclusive access to the shared variable.
This somewhat defeats the purpose of concurrency, and also
has the potential of introducing other kinds of bugs like
deadlocks, where nothing makes progress and the whole
program is frozen.  (You will encounter concurrency in an
Operating Systems course.)

Modern day architectures are characterized by multiple
programs distributed geographically or even within the same
processors (cores).  In the geographically distributed case,
the concept of shared memory makes no sense.  Instead
computation requires communication via /message passing/
between these processors.  Communicating with messages means
no shared memory, so the complications of shared memory are
obviated.  In addition, message passing could be made
asynchronous, so a sender need not wait for a receiver.

Another characteristic of modern programs is that they are
/reactive/.  They react to events, like the arrival of a
message, or the clicking of the mouse by a human.

This leads us to Actors, which are small programs with local
and private state, not shared with any other actor.  Actors
communicate via asynchronous message passing.

Actors have been around since 1973, but they were ahead of
their time.  The increasingly distributed and reactive
nature of computing today has resulted in a resurgence of
interest in Actors.

* Javascript's execution model

A good description of Javascript's execution model (called
the Event Loop) may be found in the following articles:

 - Thomas Hunter's slides on the [[https://thomashunter.name/blog/the-javascript-event-loop-presentation/][Javascript Event Loop model]]

 - Carbon Five's  [[http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/][Javascript Event Loop Model Explained]]

 - Mozilla's pages on [[https://developer.mozilla.org/en/docs/Web/JavaScript/EventLoop][Javascript Event Loop]]

 - Dan Martensen's Apr 2015 article on [[https://danmartensen.svbtle.com/events-concurrency-and-javascript][Events, Concurrency and JavaScript]]

In brief, Javascript's execution model consists of a queue
of /thunks/.  A thunk is a function of no arguments.  The
function at the front of the queue is picked and run.  In
the process, the function may call other functions.  Call
frames are stored on a stack.  Once the function runs to
completion, the next thunk on the queue is executed.  A
thunk may be added to the execution queue by invoking the
=setTimeout= function.  =setTimeout(thunk)= adds =thunk= to
the execution queue.  An optional second argument =ms=
specifies the number of milliseconds /after/ which the
argument is added to the queue.  The default (=ms= = 0) adds
the thunk to the queue immediately.

* A Javascript Implementation of asynchronous send

The first building block is the function =invokeLater= that
uses =setTimeout= to simply put a thunk on the Javascript
execution queue.

#+BEGIN_SRC js :tangle send.js
var invokeLater = function (thunk) {setTimeout(thunk, 0);}
#+END_SRC

Two things are worth noting: First, the action of putting
the thunk on the queue is usually a small amount of time.
Second, the thunk itself isn't run; it is only queued for
later execution.  

** The =send= primitive

The central piece in building actors is the =send=
primitive.  =send(a, msg)= sends the message =msg=
to actor =a=.  

#+BEGIN_SRC js :tangle send.js
var send = function(recipient, message) {
    invokeLater(function () {
        recipient.react(message);
    });
};
#+END_SRC

=send(recipient, message)= queues a thunk, /which when
invoked/ will call the =recepient='s =react= method 
with =message= as an argument.

* Example
** Actor =B= increments a number sent by actor =A=
Consider two actors =A= and =B=.  The interaction between
=A= and =B= is simple: =A= sends a message to =B= whose
payload includes a number, say =n=.  =B= sends =n+1= back to
=A=.

Each actor is implemented as an object containing the fields
=name= (for print identity) and =react=, a function that
takes a message and handles it.

** The actor =A= 

First we declare an object =A=  whose name on "A". 
#+BEGIN_SRC js :tangle example.js
var A = { 
   name : "A",
#+END_SRC


The =run= method is a function that takes a number =n= and
sends it to the actor =B=, suitably logging messages to the
console.  Note that the actor =A= is part of the message to
=B=.

#+BEGIN_SRC js :tangle example.js
   run : function(n) {
	   console.log("A: entered run");
	   send(B, {arg: n, sender: A});
	   console.log("A: sent msg to B");
   },
#+END_SRC

The =react= method simply logs the answer:
#+BEGIN_SRC js :tangle example.js
   react : function(message) {
            	console.log("A: got result  " + message.answer + 
							" from "+ message.sender.name);
   }
}
#+END_SRC

** The actor =B=
The actor =B= receives a message from =A=, extracts the
argument (a number) and sends back a message to =A=
containing the incremented value.

#+BEGIN_SRC js :tangle example.js
var B = {
     name : "B",
     react : function(message) {
		 console.log("B: received message from A");
		 send(message.sender, {answer: message.arg + 1, sender : B});
		 console.log("B: sent msg to A");
	 }
}
#+END_SRC

** Boilerplate HTML to run the example
The boilerplate HTML file =example.html= loads the actor
library =send.js= and the example =example.js=.

#+BEGIN_SRC html :tangle example.html
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Simple Actor Example</title>
  <script type="text/javascript" src="send.js"></script>
  <script type="text/javascript" src="example.js"></script>
</head>
<body>
  <h1> Simple example showing message passing between Actors</h1>

  <p> To run the Example on a Chrome Browser, Ctrl-Shift-J
  to the JS console and invoke, for example,
  A.run(5)</code>.
  </p>
#+END_SRC


